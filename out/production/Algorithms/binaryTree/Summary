二叉树
用<递归和非递归>的方式实现1-3
1.先序遍历 pre traverse - 中左右，非递归：栈 先右孩子再左孩子入栈
2.中序遍历 in traverse  - 左中右，非递归：栈 子树整条左边界依次进栈，若无，从栈中弹出并打印，打印的右子树 重复
3.后序遍历 pos traverse - 左右中，非递归：两个栈，s1 pop出的（中右左），先放入s2，然后pop s2

4.宽度优先遍历（一层一层地打印） - 用队列queue 先入先出
    e.g.求一颗二叉树的最大宽度 （需要知道每一层有几个数）

5.***二叉树的递归套路***
利用子树的信息 构建所有可能性
    5.1 判断以x根的树 是否为二叉搜索树 Binary Search Tree
    思路一：中序遍历是否递增
    思路二： 用 二叉树的递归套路
           条件1 - x的左子树是搜索二叉树
           条件2 - x的右子树是搜索二叉树
           条件3 - x的左子树上的最大值 < x; x的右子树上的最小值 > x

           需要左子树：是否是搜索二叉树 + max
           需要右子树：是否是搜索二叉树 + min

           整合：是否是搜索二叉树 + min + max - 为了递归

    5.2 判断以x根的树 是否为满二叉树 Full binary tree（max高度=h, 节点个数为N -> N = 2^h-1）
    思路一：求h，求N，看满不满足那个式子
    思路二：用 二叉树的递归套路
          信息：N，h

    5.3 判断以x根的树 是否为平衡二叉树 balanced binary tree（每棵子树的左子树和右子树的高度差 不超过1）

    5.4 最低公共祖先 - 低共 (以x为根的树，Node o1 与 Node o2 的最低公共祖先)
        可能性：o1 & o2 都不在这棵树上 - 低共 不存在
             o1 & o2 只有一个在这棵树上 - 低共 不存在
             o1 & o2 都在这棵树上
                都在左树上 / 右树上
                一个在左树 一个在右树 - 就是x
        信息：是否发现了o1，是否发现了o2，低共

    5.5 判断以x根的树 是否为完全二叉树 complete binary tree - 宽度优先遍历
        条件 1.遍历的任何一个节点，不能有右无左
            2.在不违反条件1的情况下，若遇到孩子不双全的节点，接下来遇到的节点，必须是叶子节点

6.后继节点 successor node - 找一个节点x的后继节点
    定义：中序遍历中，一个节点之后的节点 就是~
    思路：
        若x有右树，则后继节点是右树最左的节点
        若x没有右树，则向上找，直到孩子是父亲的左孩子，该父亲是后继节点
    （拓展：前驱节点 - 中序遍历中，一个节点之前的节点 就是~）


7.二叉树的序列化与反序列化 serilize
    先序的序列化
    先序的反序列化 reconPreOrder - 弹出一个head
 应用 - 判断一棵树T1是不是另一棵树T2的子树

8.折痕问题 - 折N次，树有N层，有2^N-1条折痕（2^N-1个节点）- 中序遍历
法一：如果都存在一个数组里 - 额外空间 O(2^N-1) - N为高度
法二：递归方法 - 额外空间 O(N) - N为高度




